<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AhDai.Base</name>
    </assembly>
    <members>
        <member name="T:AhDai.Base.Const">
            <summary>
            Const
            </summary>
        </member>
        <member name="F:AhDai.Base.Const.DateTimeFormat">
            <summary>
            时间格式
            </summary>
        </member>
        <member name="T:AhDai.Base.Extensions.ArrayExtensions">
            <summary>
            ArrayExt
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToByte(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToSByte(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToInt16(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToInt32(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToInt64(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToSingle(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToDouble(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToDecimal(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToDateTime(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ToTimeSpan(System.String[])">
            <summary>
            类型转换
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.Compare(System.Byte[],System.Byte[])">
            <summary>
            对比
            </summary>
            <param name="bytesA"></param>
            <param name="bytesB"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ExistByStartsWith(System.String[],System.String)">
            <summary>
            是否存在指定属性
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ArrayExtensions.ListByStartsWith(System.String[],System.String)">
            <summary>
            读取子级属性
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Extensions.CollectionExtensions">
            <summary>
            CollectionExtensions
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.CollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            转换为字典
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Extensions.DataTableExtensions">
            <summary>
            DataTableExt
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.DataTableExtensions.ToList``1(System.Data.DataTable)">
            <summary>
            ToList
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.DataTableExtensions.ToModel``1(System.Data.DataRow,System.Reflection.PropertyInfo[])">
            <summary>
            ToModel
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataRow"></param>
            <param name="propertyInfos"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.DataTableExtensions.ToList``1(System.Data.IDataReader)">
            <summary>
            ToList
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Extensions.ExceptionExtensions">
            <summary>
            ExceptionExt
            </summary>
        </member>
        <member name="T:AhDai.Base.Extensions.IDictionaryExtensions">
            <summary>
            IDictionaryExtensions
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.IDictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            排序
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.IDictionaryExtensions.SortByASCII``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            ASCII排序
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.IDictionaryExtensions.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            类型转换
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.IDictionaryExtensions.FilterSort``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
            按指定键值筛选并排序
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.IDictionaryExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
            删除指定键
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.IDictionaryExtensions.ToQueryString``1(System.Collections.Generic.IDictionary{System.String,``0},System.Boolean,System.String[])">
            <summary>
            转换为QueryString
            </summary>
            <param name="dict"></param>
            <param name="ignoreNullOrEmpty"></param>
            <param name="ignores"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.IDictionaryExtensions.ToJoinString(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean,System.String[])">
            <summary>
            转换为连接字符串
            </summary>
            <param name="dict"></param>
            <param name="separator"></param>
            <param name="ignoreNullOrEmpty"></param>
            <param name="ignores"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.IDictionaryExtensions.ToXmlString(System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            转换为Xml字符串
            </summary>
            <param name="dict"></param>
            <param name="ignores"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Extensions.LinqExtensions">
            <summary>
            LinqExt
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.LinqExtensions.Paginate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="pageNumber">页码</param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Extensions.ObjectExtensions">
            <summary>
            ObjectExt
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.ObjectExtensions.Clone``1(``0,System.String[])">
            <summary>
            克隆
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj"></param>
            <param name="ignores">忽略的属性</param>
        </member>
        <member name="M:AhDai.Base.Extensions.ObjectExtensions.SetMinValue(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置默认值为对应类型的最小值
            </summary>
            <param name="obj"></param>
            <param name="values">例外的默认值，格式：属性名称-值</param>
        </member>
        <member name="M:AhDai.Base.Extensions.ObjectExtensions.IsMinValue(System.Object,System.Type)">
            <summary>
            是否最小值
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.ObjectExtensions.GetMinValue(System.Object,System.Type)">
            <summary>
            获取最小值
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Extensions.ReflectionExtensions">
            <summary>
            ReflectionExtensions
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.ReflectionExtensions.SetValueExt(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            赋值-自动转换类型
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:AhDai.Base.Extensions.SortedDictionaryExtensions">
            <summary>
            SortedDictionaryExt
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.SortedDictionaryExtensions.ToDictionary``2(System.Collections.Generic.SortedDictionary{``0,``1})">
            <summary>
            类型转换
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="sorted"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Extensions.StringExtensions">
            <summary>
            StringExt
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToByte(System.String,System.Byte)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToSByte(System.String,System.SByte)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToBoolean(System.String,System.Boolean)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToInt16(System.String,System.Int16)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToInt32(System.String,System.Int32)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToInt64(System.String,System.Int64)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToUInt64(System.String,System.UInt64)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToSingle(System.String,System.Single)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToDouble(System.String,System.Double)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToDecimal(System.String,System.Decimal)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToDateTime(System.String)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToDateTime(System.String,System.DateTime)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToDateTimeExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="format"></param>
            <param name="provider"></param>
            <param name="styles"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToDateTimeExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="format"></param>
            <param name="provider"></param>
            <param name="styles"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToDateTimeExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="formats"></param>
            <param name="provider"></param>
            <param name="styles"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToDateTimeExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="formats"></param>
            <param name="provider"></param>
            <param name="styles"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToTimeSpan(System.String)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToTimeSpan(System.String,System.TimeSpan)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToTimeSpanExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToTimeSpanExact(System.String,System.String,System.IFormatProvider,System.TimeSpan)">
            <summary>
            类型转换
            </summary>
            <param name="s"></param>
            <param name="format"></param>
            <param name="provider"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.Complete(System.String,System.Int32,System.String)">
            <summary>
            补齐
            </summary>
            <param name="s"></param>
            <param name="length">指定长度；输入字符串超出字符时，不做处理，直接返回</param>
            <param name="prefix">前缀</param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.Replace(System.String,System.Int32,System.Int32)">
            <summary>
            替换字符
            </summary>
            <param name="s"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.Replace(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            替换字符
            </summary>
            <param name="s"></param>
            <param name="newChar"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.StringExtensions.ToInline(System.String)">
            <summary>
            去除空格、回车、换行符和制表符
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Extensions.XmlExtensions">
            <summary>
            XmlExt
            </summary>
        </member>
        <member name="M:AhDai.Base.Extensions.XmlExtensions.GetAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            GetAttribute
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.XmlExtensions.GetInnerText(System.Xml.XmlDocument,System.String)">
            <summary>
            GetInnerText
            </summary>
            <param name="doc"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Extensions.XmlExtensions.GetInnerText(System.Xml.XmlNode,System.String)">
            <summary>
            GetInnerText
            </summary>
            <param name="node"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.HashHalg">
            <summary>
            哈希算法名称
            </summary>
        </member>
        <member name="F:AhDai.Base.HashHalg.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:AhDai.Base.HashHalg.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:AhDai.Base.HashHalg.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:AhDai.Base.HashHalg.SHA384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:AhDai.Base.HashHalg.SHA512">
            <summary>
            SHA512
            </summary>
        </member>
        <member name="T:AhDai.Base.StringType">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="F:AhDai.Base.StringType.Base64">
            <summary>
            Base64
            </summary>
        </member>
        <member name="F:AhDai.Base.StringType.Hex">
            <summary>
            Hex
            </summary>
        </member>
        <member name="T:AhDai.Base.UtcDateTime">
            <summary>
            UtcDateTime
            </summary>
        </member>
        <member name="F:AhDai.Base.UtcDateTime.MinValue">
            <summary>
            表示 UtcDateTime 的最小值。 此字段为只读。
            </summary>
        </member>
        <member name="M:AhDai.Base.UtcDateTime.GetTimestamp">
            <summary>
            获取时间戳（秒）
            </summary>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.Base64Util">
            <summary>
            Base64Helper
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.Base64Util.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            字符串转Base64字符串
            </summary>
            <param name="s"></param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.Base64Util.ToString(System.String,System.Text.Encoding)">
            <summary>
            Base64字符串转字符串
            </summary>
            <param name="s"></param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.Base64Util.ToBytes(System.String)">
            <summary>
            Base64字符串转字节数组
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.DateTimeUtil">
            <summary>
            DateTimeUtil
            </summary>
        </member>
        <member name="P:AhDai.Base.Utils.DateTimeUtil.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="P:AhDai.Base.Utils.DateTimeUtil.TimestampOfMilliseconds">
            <summary>
            时间戳（距1970-01-01的毫秒数）
            </summary>
        </member>
        <member name="P:AhDai.Base.Utils.DateTimeUtil.TimestampOfSeconds">
            <summary>
            时间戳（距1970-01-01的秒数）
            </summary>
        </member>
        <member name="T:AhDai.Base.Utils.EnumUtil">
            <summary>
            EnumExtensions
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.EnumUtil.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.EnumUtil.GetValueDescription``1(``0)">
            <summary>
            获取枚举值的描述
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.EnumUtil.GetValues``1">
            <summary>
            获取枚举的值的集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.EnumUtil.GetValuesAndDescriptions``1">
            <summary>
            获取枚举的值的集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.HashAlgorithmUtil">
            <summary>
            HashAlgorithmHelper
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.HashAlgorithmUtil.ComputeHashByUsing``1(System.Byte[])">
            <summary>
            使用using调用ComputeHash
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.HexUtil">
            <summary>
            HexHelper
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.HexUtil.ToHexString(System.String,System.Text.Encoding)">
            <summary>
            字符串转16进制字符串
            </summary>
            <param name="s"></param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.HexUtil.ToHexString(System.Byte[])">
            <summary>
            字节数组转16进制字符串
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.HexUtil.ToString(System.String,System.Text.Encoding)">
            <summary>
            16进制字符串转字符串
            </summary>
            <param name="hex"></param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.HexUtil.ToBytes(System.String)">
            <summary>
            16进制字符串转字节数组
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.ReflectionUtil">
            <summary>
            ReflectionHelper
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.ReflectionUtil.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.ReflectionUtil.GetProperties``1">
            <summary>
            获取属性
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.ReflectionUtil.GetProperties(System.Type)">
            <summary>
            获取属性
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.ReflectionUtil.ConvertTo``2(``1,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            类型转换
            </summary>
            <typeparam name="T0">目标类型</typeparam>
            <typeparam name="T1">源类型</typeparam>
            <param name="source">源</param>
            <param name="mappings">属性名不同的映射关系（k=目标属性名，v=源属性名）</param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.ReflectionUtil.ConvertTo``2(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            类型转换
            </summary>
            <typeparam name="T0">目标类型</typeparam>
            <typeparam name="T1">源类型</typeparam>
            <param name="sources">源</param>
            <param name="mappings">属性名不同的映射关系（k=目标属性名，v=源属性名）</param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.ReflectionUtil.BuildGetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            BuildGetter
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.ReflectionUtil.BuildSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            BuildSet
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.ReflectionUtil.CreateDelegate``1(System.Reflection.MethodInfo)">
            <summary>
            CreateDelegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.ReflectionUtil.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            GetPropertyInfo
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.ResourceUtil">
            <summary>
            ResourceHelper
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.ResourceUtil.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.ResourceUtil.Get``1">
            <summary>
            获取资源文件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.ResourceUtil.Get(System.Type)">
            <summary>
            获取资源文件
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.ResourceUtil.Get(System.String,System.Reflection.Assembly)">
            <summary>
            获取指定类型的属性
            </summary>
            <param name="baseName"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.RSAParametersUtils">
            <summary>
            RSAParametersUtils
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.RSAParametersUtils.FromXmlString(System.String)">
            <summary>
            FromXmlString
            </summary>
            <param name="xmlString"></param>
        </member>
        <member name="M:AhDai.Base.Utils.RSAParametersUtils.ToXmlString(System.Security.Cryptography.RSAParameters)">
            <summary>
            ToXmlString
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.RSAParametersUtils.FromPemPublicKey(System.String)">
            <summary>
            FromPemPublicKey
            </summary>
            <param name="publicKey"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.RSAParametersUtils.FromPemPrivateKey(System.String)">
            <summary>
            FromPemPrivateKey
            </summary>
            <param name="privateKey"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.RSAParametersUtils.FromtX509PublicKey(System.String)">
            <summary>
            从x509格式的证书中提取公钥
            </summary>
            <param name="publicKey"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.RSAParametersUtils.FromtX509PublicKey(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            从x509格式的证书中提取公钥
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.RSAParametersUtils.GetIntegerSize(System.IO.BinaryReader)">
            <summary>
            GetIntegerSize
            </summary>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.StringUtil">
            <summary>
            StringHelper
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.StringUtil.GenerateRandomDigital(System.Int32)">
            <summary>
            生成指定长度的随机数字字符串
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.StringUtil.GenerateRandom(System.Int32)">
            <summary>
            生成指定长度的随机字符串
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AhDai.Base.Utils.StringUtil.GenerateRandom(System.String,System.Int32)">
            <summary>
            生成验指定长度的随机字符串
            </summary>
            <param name="bound"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.TextUtil">
            <summary>
            TextHelper
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.TextUtil.GetEncoding(System.String)">
            <summary>
            GetEncoding
            </summary>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="T:AhDai.Base.Utils.XmlUtil">
            <summary>
            XmlHelper
            </summary>
        </member>
        <member name="M:AhDai.Base.Utils.XmlUtil.SerializeObject``1(``0)">
            <summary>
            序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
    </members>
</doc>
