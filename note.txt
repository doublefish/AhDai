# http://download.redis.io/redis-stable/redis.conf

bind 127.0.0.1 # 这行要注释掉，解除本地连接限制。可以修改为0.0.0.0
protected-mode no # 默认yes，如果设置为yes，则只允许在本机的回环连接，其他机器无法连接。
daemonize no # 默认no 为不守护进程模式，docker部署不需要改为yes，docker run -d本身就是后台启动，不然会冲突
requirepass redis # 设置密码
appendonly yes # 持久化


docker run --name redis \
   -p 6379:6379 \
   -v /D/app/docker/redis/redis.conf:/etc/redis/redis.conf \
   -v /D/app/docker/redis/data:/data \
   -d redis redis-server /etc/redis/redis.conf --appendonly yes

docker run --name redis -p 6379:6379 -v /D/app/docker/redis/redis.conf:/etc/redis/redis.conf -v /D/app/docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes

# 说明
-p 6379:6379：端口映射，前面是宿主机，后面是容器。
–name redis：指定该容器名称。
-v 挂载文件或目录：前面是宿主机，后面是容器。
-d redis redis-server /etc/redis/redis.conf：表示后台启动redis，以配置文件启动redis，加载容器内的conf文件。
appendonly yes：开启redis 持久化。



docker pull wurstmeister/zookeeper

docker pull wurstmeister/kafka

docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2 --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper

# IP地址要换
docker run -d --log-driver json-file --log-opt max-size=100m --log-opt max-file=2 --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=172.21.64.1:2181/kafka -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.21.64.1:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -v /etc/localtime:/etc/localtime wurstmeister/kafka

-e KAFKA_BROKER_ID=0  在kafka集群中，每个kafka都有一个BROKER_ID来区分自己
-e KAFKA_ZOOKEEPER_CONNECT=172.21.64.1:2181/kafka 配置zookeeper管理kafka的路径
-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.21.64.1:9092  把kafka的地址端口注册给zookeeper
-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 配置kafka的监听端口
-v /etc/localtime:/etc/localtime 容器时间同步虚拟机的时间


docker pull sheepkiller/kafka-manager

docker run -d --name kfk-manager --restart always -p 9000:9000 -e ZK_HOSTS=172.21.64.1:2181 sheepkiller/kafka-manager


